name: Check All

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        binary:
          - name: dprint
            repo: dprint/dprint
            type: release
          - name: polkadot
            repo: paritytech/polkadot
            type: release
          - name: polkadot-parachain
            repo: paritytech/cumulus
            type: release
          - name: substrate-contracts-node
            repo: paritytech/substrate-contracts-node
            type: release
          - name: trappist-collator
            repo: paritytech/trappist
            args: --features with-trappist-runtime
            type: commit
          - name: stout-collator
            repo: paritytech/trappist
            args: --no-default-features --features with-stout-runtime
            from: trappist-collator
            type: commit
        target:
          - triple: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - triple: aarch64-apple-darwin
            runner: macos-latest
          - triple: x86_64-apple-darwin
            runner: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@9db7f66e8e16b5699a514448ce994936c63f0d54 # v1.1.0
        with:
          deno-version: v1.x
      - id: get_version
        run: deno run -A get_version.ts ${{ matrix.binary.type }} ${{ matrix.binary.repo }} 
      - id: check_exists
        run: deno run -A check_exists.ts ${{ matrix.binary.name }}/${{ steps.get_version.outputs.version }}/${{ matrix.target.triple }}
        env:
          S3_ACCESS_KEY: ${{ vars.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_REGION: ${{ vars.S3_REGION }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
      - name: Dispatch Build
        if: ${{ steps.check_exists.outputs.exists == 'false' }}
        run: >
          gh workflow run build.yml --ref $(git rev-parse --abbrev-ref @)
          -f binary_repo='${{ matrix.binary.repo }}'
          -f binary_name='${{ matrix.binary.name }}'
          -f binary_args='${{ matrix.binary.args }}'
          -f binary_from='${{ matrix.binary.from || matrix.binary.name }}'
          -f target_triple='${{ matrix.target.triple }}'
          -f target_runner='${{ matrix.target.runner }}'
          -f version='${{ steps.get_version.outputs.version }}'
          -f ref='${{ steps.get_version.outputs.ref }}'
        env:
          GH_TOKEN: ${{ github.token }}
